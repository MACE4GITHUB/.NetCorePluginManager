<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedPluginFeatures</name>
    </assembly>
    <members>
        <member name="T:SharedPluginFeatures.CarouselImage">
            <summary>
            Carousel Image, abstract class that plugin modules can implement to carousel images.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.CarouselImage.ImageUrl">
            <summary>
            Image url obtains the image to be shown within the carousel.
            </summary>
            <returns>url for the image.</returns>
        </member>
        <member name="M:SharedPluginFeatures.CarouselImage.Url">
            <summary>
            Url to be used when the carousel item is clicked
            </summary>
            <returns>url of the route to be redirected to.</returns>
        </member>
        <member name="M:SharedPluginFeatures.CarouselImage.SortOrder">
            <summary>
            Effects the order in which the carousel item is displayed.
            
            Carousel items will be sorted by SortOrder ascending and then by name.
            </summary>
            <returns>int.  Order in which the item will be sorted.</returns>
        </member>
        <member name="T:SharedPluginFeatures.MainMenuItem">
            <summary>
            Abstract class used to provide easy access to menu items for display within a view.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.MainMenuItem.Area">
            <summary>
            Name of the area to be used when building a route
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.MainMenuItem.Controller">
            <summary>
            Name of the controller to be used when building a route.
            </summary>
            <returns>string.  Controller name, e.g. Helpdesk</returns>
        </member>
        <member name="M:SharedPluginFeatures.MainMenuItem.Action">
            <summary>
            Name of the action within the controller to be used when building a route.
            </summary>
            <returns>string.  Name of the action, e.g. Index</returns>
        </member>
        <member name="M:SharedPluginFeatures.MainMenuItem.Name">
            <summary>
            Name to be displayed when the menu is shown.
            </summary>
            <returns>string.  Name of menu item</returns>
        </member>
        <member name="M:SharedPluginFeatures.MainMenuItem.SortOrder">
            <summary>
            Int depicting the order for which the menu item will be sorted in comparison to other menu items.
            </summary>
            <returns>int. depicting sort order.</returns>
        </member>
        <member name="T:SharedPluginFeatures.SystemAdminSubMenu">
            <summary>
            Abstract class that plugin modules can implement in order to add menu items the the SystemAdmin.Plugin module.
            
            The SystemAdmin.Plugin module is used to display statistical information in many forms as provided by AspNetCore.PluginManager and any plugins which wish to provide instant statistics for site owners.
            
            Typical useage is to display timing statistics by implementing Timings class, through to showing custom data or even data shown within a map, as UserSessionMiddleware.Plugin does.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.Area">
            <summary>
            Area in which the implementation exists, or empty string if not contained within an area.
            
            This value will be used to form part of the Url when the menu is clicked.
            </summary>
            <returns>string.  area name or empty string.</returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.Controller">
            <summary>
            Name of the controller that implements the menu.
            
            This value will be used to form part of the Url when the menu is clicked.
            </summary>
            <returns>string.  Controller name.</returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.Action">
            <summary>
            Name of the action that will be called when the user clicks the menu item.
            </summary>
            <returns>string.  Name of the action.</returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.Name">
            <summary>
            Name of the menu, this can also be the name of a Localized string.
            </summary>
            <returns>string.  Display name for menu item.</returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.SortOrder">
            <summary>
            Sort order for menu item.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.MenuType">
            <summary>
            Type of menu item being displayed, this is used internally to display the Data provided.
            </summary>
            <returns>SystemAdminMenuType.  </returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.Image">
            <summary>
            Image url to be displayed with the menu item, a default image is provided if the image does not exist.
            </summary>
            <returns>string.  Url of image or empty string.</returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.Data">
            <summary>
            The data to be shown when the menu item is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.ParentMenuName">
            <summary>
            Name of the parent view where the menu item will be displayed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.BackColor">
            <summary>
            Back color that will be displayed for the menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.ForeColor">
            <summary>
            Forecolor that will be displayed for the menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminSubMenu.CompareTo(SharedPluginFeatures.SystemAdminSubMenu)">
            <summary>
            IComparable implementation used to sort menu items by SortOrder then Name
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminSubMenu.UniqueId">
            <summary>
            Unique id of the menu item.  This is assigned by the SystemAdmin.Plugin module.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminSubMenu.ParentMenu">
            <summary>
            Parent menu implementation.  This is assigned by the SystemAdmin.Plugin module.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.BadEggAttribute">
            <summary>
            BadEgg attribute, see BadEgg.Plugin for further information on how this attribute is used.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BadEggAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BadEggAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="validateQuery">If true then query input values will be validated.</param>
            <param name="validateForm">If true then form input values will be validated</param>
        </member>
        <member name="P:SharedPluginFeatures.BadEggAttribute.ValidateQueryFields">
            <summary>
            Indicates that query field values should be validated for this route.
            </summary>
            <value>bool.  If true then all query fields will be validated for the route.</value>
        </member>
        <member name="P:SharedPluginFeatures.BadEggAttribute.ValidateFormFields">
            <summary>
            Indicates that form field values should be validated.
            </summary>
            <value>bool.  If true then all form fields will be validated for the route.</value>
        </member>
        <member name="T:SharedPluginFeatures.BreadcrumbAttribute">
            <summary>
            The breadcrumb attribute is used by the Breadcrumb.Plugin module to automatically generate breadcrumbs for a route.
            
            The controller for the breadcrumb is gotten automatically when breadcrumb plugin generates a list of routes with breadcrumbs.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BreadcrumbAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            
            The breadcrumb will appear after the breadcrumb for the parent route.
            </summary>
            <param name="name">Name of the breadcrumb item.</param>
            <param name="parentRoute">Route of the parent item for the route.</param>
        </member>
        <member name="M:SharedPluginFeatures.BreadcrumbAttribute.#ctor(System.String)">
            <summary>
            Constructor
            
            This breadcrumb has no parent route.
            </summary>
            <param name="name">Name of the breadcrumb item.</param>
        </member>
        <member name="M:SharedPluginFeatures.BreadcrumbAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            
            
            </summary>
            <param name="name">Name of the breadcrumb item.</param>
            <param name="parentControllerName">Name of the controller which is a parent of this breadcrumb.</param>
            <param name="parentActionName">Name of the action which is the parent of this breadcrumb.</param>
        </member>
        <member name="P:SharedPluginFeatures.BreadcrumbAttribute.Name">
            <summary>
            Name of breadcrumb.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.BreadcrumbAttribute.ParentRoute">
            <summary>
            Parent route for breadcrumb, used when generating a breadcrumb heirarchy.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.BreadcrumbAttribute.HasParams">
            <summary>
            Indicates that the route contains parameter values, if true then the way the breadcrumb is generated is slightly different.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.DenySpiderAttribute">
            <summary>
            The deny spider attribute is used on Controller Action methods to indicate that a spider should not use that particular route.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.DenySpiderAttribute.#ctor">
            <summary>
            Default constructor, indicates that all user agents are denied.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.DenySpiderAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="userAgent">Specify the specific user agent that is to be denied access to the route.</param>
        </member>
        <member name="M:SharedPluginFeatures.DenySpiderAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="userAgent">Specify the specific user agent that is to be denied access to the route.</param>
            <param name="comment">Comment to be included in the automatically generated robots.txt file.</param>
        </member>
        <member name="P:SharedPluginFeatures.DenySpiderAttribute.UserAgent">
            <summary>
            The user agent that is to be denied access to the route.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.DenySpiderAttribute.Comment">
            <summary>
            Optional comment that will appear in the robots.txt file.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.LoggedInAttribute">
            <summary>
            This attribute is used in conjunction with the UserSessionMiddleware.Plugin module and indicates that a user
            must be logged in when attempting to gain access to the route.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.LoggedInAttribute.#ctor">
            <summary>
            Default constructor.
            
            If used the login page is set to the default value of /Login/
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.LoggedInAttribute.#ctor(System.String@)">
            <summary>
            Constructor
            
            Allows the route to specify a route to the login page that will be used.
            </summary>
            <param name="loginPage">string.  Url of login page.</param>
        </member>
        <member name="P:SharedPluginFeatures.LoggedInAttribute.LoginPage">
            <summary>
            The url of the page the user will be redirected to, in order to login and gain access to the route where the attribute was applied.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.LoggedInOutAttribute">
            <summary>
            This attribute is used in conjunction with the UserSessionMiddleware.Plugin module and indicates that a user can be
            either logged in or out when attempting to navigate to the route.
            
            This attribute would be used if a LoggedInAttribute or LoggedOutAttribute is defined on the controller, but a specific
            method is allowed regardless of the user logged in stats.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.LoggedOutAttribute">
            <summary>
            This attribute is used in conjunction with the UserSessionMiddleware.Plugin module and indicates that a user
            must be logged out when attempting to gain access to the route.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.LoggedOutAttribute.#ctor">
            <summary>
            Default constructor
            
            If a logged in user attempts to enter the route, they will be sent to the site home page (/)
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.LoggedOutAttribute.#ctor(System.String@)">
            <summary>
            Constructor
            
            Allows the developer to specify a page that the user will be redirected to if the attempt to navigate to the route whilst logged in.
            </summary>
            <param name="redirectPage">string.  Url of route the user will be redirected to.</param>
        </member>
        <member name="P:SharedPluginFeatures.LoggedOutAttribute.RedirectPage">
            <summary>
            Url of the page the user will be redirected to, should they be logged into the system and attempt to access the route.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.RestrictedIpRouteAttribute">
            <summary>
            This attribute is used in conjunction with the RestricIp.Plugin module to restrict specific rotues
            to specific Ip Addresses within the system.
            
            See RestrictIp.Plugin.RestrictIp.Plugin for further details on configuring Ip restrictions by routes.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.RestrictedIpRouteAttribute.#ctor(System.String)">
            <summary>
            Default constructor.
            
            This constructor takes the name of the profile which is used to configure whether to allow or deny an Ip address for a specific route.
            </summary>
            <param name="profileName">Name of profile within the settings.</param>
        </member>
        <member name="P:SharedPluginFeatures.RestrictedIpRouteAttribute.ProfileName">
            <summary>
            Name of the profile which is used to allow or deny an Ip address within a specific route.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.Breadcrumb">
            <summary>
            This class is used to contain basic breadcrumb data.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.Breadcrumb.#ctor(System.String@,System.String@)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the breadcrumb.</param>
            <param name="route">Route that the breadcrumb is aligned to.</param>
        </member>
        <member name="P:SharedPluginFeatures.Breadcrumb.Name">
            <summary>
            Name of the breadcrumb.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.Breadcrumb.Route">
            <summary>
            Route that the breadcrumb is aligned to.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.BreadcrumbItem">
            <summary>
            The breadcrumb item class is used extensively by the Breadcrumb.Plugin module to depict a breadcrumb item.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BreadcrumbItem.#ctor(System.String@,System.String@,System.Boolean@)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of breadcrumb item.</param>
            <param name="route">Route to which the breadcrumb item is linked.</param>
            <param name="hasParameters">Indicates whether the route has parameters or not.</param>
        </member>
        <member name="P:SharedPluginFeatures.BreadcrumbItem.Name">
            <summary>
            Name of breadcrumb item.
            </summary>
            <value>string</value>
        </member>
        <member name="P:SharedPluginFeatures.BreadcrumbItem.Route">
            <summary>
             Route to which the breadcrumb item is linked.
            </summary>
            <value>string</value>
        </member>
        <member name="P:SharedPluginFeatures.BreadcrumbItem.HasParameters">
            <summary>
            Indicates whether the route has parameters or not.
            </summary>
            <value>bool</value>
        </member>
        <member name="T:SharedPluginFeatures.CaptchaImage">
            <summary>
            Generates an image that can be used when confirming that form entry is from a human and not a computer.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.CaptchaImage.Text">
            <summary>
            The text to be displayed within the image.
            </summary>
            <value>string</value>
        </member>
        <member name="P:SharedPluginFeatures.CaptchaImage.Image">
            <summary>
            The image generated.
            </summary>
            <value>Bitmap</value>
        </member>
        <member name="P:SharedPluginFeatures.CaptchaImage.Width">
            <summary>
            The width of the image.
            </summary>
            <value>int</value>
        </member>
        <member name="P:SharedPluginFeatures.CaptchaImage.Height">
            <summary>
            The height of the image
            </summary>
            <value>int</value>
        </member>
        <member name="M:SharedPluginFeatures.CaptchaImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            
            Provides specific values for generating an image, using GenericSerif as the font.
            </summary>
            <param name="s">Text to be displayed on the image.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
        </member>
        <member name="M:SharedPluginFeatures.CaptchaImage.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Constructor
            
            Provides specific values for generating an image, including the font to be used.
            </summary>
            <param name="s">Text to be displayed on the image.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="familyName">Font name to be used.</param>
        </member>
        <member name="M:SharedPluginFeatures.CaptchaImage.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.CaptchaImage.Dispose">
            <summary>
            Dispose, ensures that resources are correctly disposed of.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.CaptchaImage.Dispose(System.Boolean)">
            <summary>
            Disposes of any allocated objects.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:SharedPluginFeatures.ErrorInformation">
            <summary>
            Used extensively by ErrorManager.Plugin module to store information about errors that have been generated within the system.
            
            See also SystemAdmin.Plugin where error information is displayed.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ErrorInformation.#ctor(System.Exception@,System.String@)">
            <summary>
            Constructor
            </summary>
            <param name="error">Exception that was raised.</param>
            <param name="errorIdentifier">Unique identifier for the error.</param>
        </member>
        <member name="P:SharedPluginFeatures.ErrorInformation.Date">
            <summary>
            The date and time the exception was first raised.
            </summary>
            <value>DateTime</value>
        </member>
        <member name="P:SharedPluginFeatures.ErrorInformation.Expired">
            <summary>
            Indicates that the exception has expired.
            </summary>
            <value>bool</value>
        </member>
        <member name="P:SharedPluginFeatures.ErrorInformation.Error">
            <summary>
            Exception that was raised.
            </summary>
            <value>System.Exception</value>
        </member>
        <member name="P:SharedPluginFeatures.ErrorInformation.ErrorCount">
            <summary>
            The number of times the exception has been raised.
            </summary>
            <value>uint</value>
        </member>
        <member name="P:SharedPluginFeatures.ErrorInformation.ErrorIdentifier">
            <summary>
            The identifier for the exception that was raised.
            </summary>
            <value>string</value>
        </member>
        <member name="M:SharedPluginFeatures.ErrorInformation.IncrementError">
            <summary>
            Used when the same exception is subsequently raised.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.ConnectionArgs">
            <summary>
            Connection arguments for DefenderConnectionAddEventHandler
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ConnectionArgs.#ctor(System.String@)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddress">The Ip address being used by the connection.</param>
        </member>
        <member name="P:SharedPluginFeatures.ConnectionArgs.IPAddress">
            <summary>
            IP Address for connection
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.DefenderConnectionAddEventHandler">
            <summary>
            Delegate for connection add
            </summary>
            <param name="sender">The class that raised the event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:SharedPluginFeatures.ConnectionRemoveArgs">
            <summary>
            Connection info event arguments
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ConnectionRemoveArgs.#ctor(System.String@,System.Double@,System.UInt64@,System.TimeSpan@)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddress">Ip Address being reported on.</param>
            <param name="hits">Average hits per minute.</param>
            <param name="requests">Total number of reuests.</param>
            <param name="duration">Total duration the Ip address remained active.</param>
        </member>
        <member name="P:SharedPluginFeatures.ConnectionRemoveArgs.Hits">
            <summary>
            Average hits per minute.
            </summary>
            <value>double</value>
        </member>
        <member name="P:SharedPluginFeatures.ConnectionRemoveArgs.Requests">
            <summary>
            Total number of reuests.
            </summary>
            <value>ulong</value>
        </member>
        <member name="P:SharedPluginFeatures.ConnectionRemoveArgs.Duration">
            <summary>
            Total duration the Ip address remained active.
            </summary>
            <value>TimeSpan</value>
        </member>
        <member name="T:SharedPluginFeatures.DefenderConnectionRemoveEventHandler">
            <summary>
            Delegate for connection remove
            </summary>
            <param name="sender">The class that raised the event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:SharedPluginFeatures.RequestBanArgs">
            <summary>
            Arguments used in DefenderRequestBan event in order to notify that an Ip Address should be banned.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.RequestBanArgs.#ctor(System.String@,System.Double@,System.UInt64@,System.TimeSpan@)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddress">Ip address being reported on.</param>
            <param name="hits">Average requests per minute.</param>
            <param name="requests">Total number of requests</param>
            <param name="duration">Total duration the Ip address remained active.</param>
        </member>
        <member name="P:SharedPluginFeatures.RequestBanArgs.AddToBlackList">
            <summary>
            Determines whether the ip address should be black listed or note.
            </summary>
            <value>bool</value>
        </member>
        <member name="T:SharedPluginFeatures.DefenderRequestBan">
            <summary>
            Delegate for log audit failure events
            </summary>
            <param name="sender">The class that raised the event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:SharedPluginFeatures.ConnectionReportArgs">
            <summary>
            Arguments used to report a connection.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ConnectionReportArgs.#ctor(System.String@,System.String@,SharedPluginFeatures.Enums.ValidateRequestResult@)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddress">Ip address.</param>
            <param name="queryString">Query or Form values used when validating the request.</param>
            <param name="validation">Result of validation.</param>
        </member>
        <member name="P:SharedPluginFeatures.ConnectionReportArgs.QueryString">
            <summary>
            Query and form data associated with the event.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ConnectionReportArgs.Result">
            <summary>
            Result determined when validating a request.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.DefenderReportConnection">
            <summary>
            Delegate used for events when the Ip address is being reported upon.
            </summary>
            <param name="sender">The class that raised the event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:SharedPluginFeatures.ShoppingCartSummary">
            <summary>
            Shopping cart summary, used if the website is implementing a shopping cart and data needs to be displayed on each page.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ShoppingCartSummary.#ctor(System.Int64@,System.Int32@,System.Decimal@,System.Decimal@,System.Decimal@,System.Decimal@,System.Globalization.CultureInfo@,System.String@)">
            <summary>
            Constructor
            </summary>
            <param name="id">Unique id for shopping cart.</param>
            <param name="totalItems">Total number of items in the shopping cart.</param>
            <param name="subTotal">Sub total value of the shopping cart.</param>
            <param name="discountRate">Discount applied to the shopping cart.</param>
            <param name="shipping">Shipping rate applied to the shopping cart.</param>
            <param name="taxRate">Tax rate applied to the shopping cart.</param>
            <param name="culture">Culture used by the shopping cart.</param>
            <param name="currencyCode">Currency code used by the shopping cart.</param>
        </member>
        <member name="M:SharedPluginFeatures.ShoppingCartSummary.ResetShoppingCartId(System.Int64@)">
            <summary>
            Resets the unique id associated with the shopping cart.
            </summary>
            <param name="id">Unique id for the cart.</param>
        </member>
        <member name="M:SharedPluginFeatures.ShoppingCartSummary.ResetTotalItems(System.Int32@)">
            <summary>
            Resets the total number of items within the cart.
            </summary>
            <param name="totalItems">Total number of items within the cart.</param>
        </member>
        <member name="M:SharedPluginFeatures.ShoppingCartSummary.ResetTotalCost(System.Decimal@,System.Globalization.CultureInfo@)">
            <summary>
            Forces the total costs for the cart to be reset.
            </summary>
            <param name="cost">New cost to be applied to the shopping cart.</param>
            <param name="cultureInfo">Culture to be applied to the shopping cart.</param>
        </member>
        <member name="M:SharedPluginFeatures.ShoppingCartSummary.ResetShipping(System.Decimal@)">
            <summary>
            Forces the shipping value to be reset within the shopping cart.
            </summary>
            <param name="shipping">Shipping charges which will apply.</param>
        </member>
        <member name="M:SharedPluginFeatures.ShoppingCartSummary.ResetTotalCost(System.Decimal@)">
            <summary>
            Forces the total costs for the cart to be reset.
            </summary>
            <param name="cost">New cost to be applied to the shopping cart.</param>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.Id">
            <summary>
            Unique id representing the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.TotalItems">
            <summary>
            Total number of items within the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.SubTotal">
            <summary>
            Sub total of the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.DiscountRate">
            <summary>
            Rate at which discount has been applied to the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.Discount">
            <summary>
            Total discount value applied to the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.TaxRate">
            <summary>
            Rate at which tax has been applied to the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.Tax">
            <summary>
            Total tax applied to the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.Shipping">
            <summary>
            Total cost of shipping for the cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.Total">
            <summary>
            Total value of the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.Culture">
            <summary>
            The culture to be used for the shopping cart.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.ShoppingCartSummary.CurrencyCode">
            <summary>
            Three letter code depicting the currency used for the cart.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.StopWatchTimer">
            <summary>
            Stopwatch Timer is used to automatically collect and generate timing data accurate to milliseconds.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.StopWatchTimer.#ctor(SharedPluginFeatures.Timings@)">
            <summary>
            Constructor
            </summary>
            <param name="timings">SharedPluginFeatures.Timings class used to contain timing data.</param>
        </member>
        <member name="M:SharedPluginFeatures.StopWatchTimer.Initialise(SharedPluginFeatures.Timings@)">
            <summary>
            Initialises an instance of the StopWatchTimer class used to collect timings.
            </summary>
            <param name="timings">SharedPluginFeatures.Timings class used to contain timing data.</param>
            <returns>StopWatchTimer</returns>
        </member>
        <member name="M:SharedPluginFeatures.StopWatchTimer.Dispose">
            <summary>
            Dispose method which ensures resources are disposed of and timing data is recorded.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.SystemAdminMainMenu">
            <summary>
            container class for system wide menu items.
            
            Although plugin modules can create as many instances of this type as they wish, it 
            is down the host application to determine how or if they are used.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminMainMenu.#ctor(System.String@,System.Int32@)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of menu item</param>
            <param name="uniqueId">Unique id given to the menu item to identify it.</param>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminMainMenu.Area">
            <summary>
            Area to be used for controller when generating a Url if required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminMainMenu.Controller">
            <summary>
            Controller to be called when the menu is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminMainMenu.Action">
            <summary>
            Action to be called when the menu is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminMainMenu.BackColor">
            <summary>
            Back color used when drawing the menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.SystemAdminMainMenu.ForeColor">
            <summary>
            Forecolor used when drawing the menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.ChildMenuItems">
            <summary>
            Child menu items within the menu.
            </summary>
            <value>List&lt;SystemAdminSubMenu&gt;</value>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.UniqueId">
            <summary>
            Unique id applied to the menu item.
            </summary>
            <value>int</value>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.Name">
            <summary>
            Name of the menu item.
            </summary>
            <value>string</value>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.SortOrder">
            <summary>
            Sort order to be applied to the menu item.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.MenuType">
            <summary>
            Type of menu
            </summary>
            <value>SystemAdminMenuType</value>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.Data">
            <summary>
            Data to be returned by the menu item.
            </summary>
            <value>string</value>
        </member>
        <member name="P:SharedPluginFeatures.SystemAdminMainMenu.Image">
            <summary>
            Image to be associated with the menu item.
            </summary>
            <value>string</value>
        </member>
        <member name="T:SharedPluginFeatures.Timings">
            <summary>
            Class used to contain timing data for requests.
            
            This stores the number of requests and total time in milleseconds serving the requests.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.Timings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.Timings.Requests">
            <summary>
            Total number of requests made.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.Timings.Slowest">
            <summary>
            Indicates the total number of milliseconds used for the request that was slowest.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.Timings.Fastest">
            <summary>
            Indicates the total number of milliseconds used for the request that was quickest.
            </summary>
        </member>
        <member name="P:SharedPluginFeatures.Timings.Average">
            <summary>
            Returns the average number of milliseconds per request.
            </summary>
            <value>decimal</value>
        </member>
        <member name="P:SharedPluginFeatures.Timings.Total">
            <summary>
            Returns the total number of requests.
            </summary>
            <value>long</value>
        </member>
        <member name="M:SharedPluginFeatures.Timings.Increment(System.Diagnostics.Stopwatch@)">
            <summary>
            Increments the total milliseconds
            </summary>
            <param name="stopWatch"></param>
        </member>
        <member name="M:SharedPluginFeatures.Timings.Increment(System.Int64@)">
            <summary>
            Increments the total milliseconds
            </summary>
            <param name="totalMilliseconds">Total number of milliseconds to increment by.</param>
        </member>
        <member name="T:SharedPluginFeatures.Constants">
            <summary>
            Constant values shared between all plugin modules and the AspNetCore.PluginManager
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.MinimumPasswordLength">
            <summary>
            Minimum password length, default to 8 characters
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.MaximumPasswordLength">
            <summary>
            Maximum password length, default to 40 characters
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.UserSession">
            <summary>
            Name of UserSession that is injected into the request pipeline
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.UserCulture">
            <summary>
            Name of culture used by the user and injected into the request pipeline by Localization.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.Breadcrumbs">
            <summary>
            Name of the breadcrumbs injected into the request pipeline by UserSessionMiddleware.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.ShoppingCart">
            <summary>
            Name of the ShoppingCart item injected into the request pipeline by ShoppingCart.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.BasketSummary">
            <summary>
            Name of the ShoppingCartSummary item injected into the request pipeline by ShoppingCart.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.DefaultTaxRate">
            <summary>
            Default tax rate used by ShoppingCart.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.SeoTitle">
            <summary>
            Name of the title of the document injected into the request pipline by SeoPlugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.SeoMetaDescription">
            <summary>
            Name of the meta description of the document injected into the request pipline by SeoPlugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.SeoMetaKeywords">
            <summary>
            Name of the meta keywords of the document injected into the request pipline by SeoPlugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.SeoMetaAuthor">
            <summary>
            Name of the author of the document injected into the request pipline by SeoPlugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.DefaultSessionCookie">
            <summary>
            Default name of session cookie if no value is specified when the application is initialised.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.UserSessionConfiguration">
            <summary>
            Name of the user session configuration setting.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.StaticFileExtensions">
            <summary>
            Default static file extensions
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.PageReferer">
            <summary>
            Page referrer constant
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.ForwardSlash">
            <summary>
            Forward slash (/) constant
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.ForwardSlashChar">
            <summary>
            Forward slash (/) char constant.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.Dash">
            <summary>
            Dash (-) char constant.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.PluginSettingBreadcrumb">
            <summary>
            Name of the Breadcrumb.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.PluginNameUserSession">
            <summary>
            Name of the UserSessionMiddleware.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.PluginNameLocalization">
            <summary>
            Name of the Localization.Plugin module which controlls all localization requests.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.PluginNameShoppingCart">
            <summary>
            Name of ShoppingCart.Plugin, this can be used in conjunction with IPluginHelperService when determining whether the shopping cart plugin is loaded.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.UserSessionServiceNotFound">
            <summary>
            Exception text used to raise an exception if the user session service is not found or configured.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.BreadcrumbRoutEqualsParentRoute">
            <summary>
            Exception text used to raise an exception should the breadcrumb route match its parent route.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.TooManyBreadcrumbs">
            <summary>
            Exception text used to raise an exception if their is a problem recursively obtaining breadcrumb results for a route.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.InvalidListener">
            <summary>
            Exception message used when registering a INotificationListener with the INotificationService message notifications, when the listener does not provide any event names.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.InvalidEventName">
            <summary>
            Exception message used when registering a INotificationListener with the INotificationService message notifications, when the event name has not been recognised.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.EventNameNotRegistered">
            <summary>
            Exception message used when registering a INotificationListener with the INotificationService message notifications, when the event name has not been registered.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.InvalidTypeName">
            <summary>
            Exception message used when attempting to view an invalid class type
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.CurrencyCodeDefault">
            <summary>
            Default currency code used when no currency code is supplied
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.ThreadNotificationService">
            <summary>
            Name of thread used for INotificationService message notifications
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.DocumentationFileCache">
            <summary>
            Name of the documentation file cache
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Constants.DocumentationListCache">
            <summary>
            Name of the documentation list cache
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.Enums">
            <summary>
            Standard Enum values shared across all plugin modules.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.Enums.LogLevel">
            <summary>
            Log Levels, defines the type of log entry being made by ILogger interface.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.Information">
            <summary>
            Log entry is information only.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.Warning">
            <summary>
            Log entry is a warning condition.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.Error">
            <summary>
            Log entry represents an error that has occurred.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.Critical">
            <summary>
            Log entry is a critical error within the system.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.PluginLoadSuccess">
            <summary>
            Log entry is informing that a plugin module has been successfully loaded.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.PluginLoadFailed">
            <summary>
            Log entry is informing that a plugin module has failed to load.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.PluginLoadError">
            <summary>
            Log entry is informing that a generic error occurred when loading a plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.PluginConfigureError">
            <summary>
            Log entry is informing that there is a configuration error with a plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.IpRestricted">
            <summary>
            Log entry informing that an Ip address has had restriction imposed upon it within the RestrictIp.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.IpRestrictedError">
            <summary>
            Log entry informing that an error occurred when imposing a restriction upon an Ip address within the RestrictIp.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.UserSessionManagerError">
            <summary>
            Indicates that an error occurred within the UserSessionMiddleware.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.SpiderError">
            <summary>
            Indicates that an error occurred within Spider.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.SpiderRouteError">
            <summary>
            Indicates that an there is an error condition for a route within Spider.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.CacheControlError">
            <summary>
            Indicates that an error occurred within CacheControl.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.GeoIpStackError">
            <summary>
            Indicates that an error took place within the GeoIpPlugin module whilst implementing GeoIpProvider.IpStack.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.ThreadManager">
            <summary>
            The event was raised by the ThreadManager
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.Localization">
            <summary>
            Indicates that an error occurred when translating a string using Localization.Plugin.
            
            This is usually an indication that a localized string is missing.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.BreadcrumbError">
            <summary>
            Indicates that an error took place when creating the breadcrumb for a route within the Breadcrumb.Plugin module.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.LogLevel.SeoError">
            <summary>
            Indicates that an error took place within SeoPlugin module.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.Enums.GeoIpProvider">
            <summary>
            Geo Ip provider types.
            
            GeoIpPlugin module can use a variety of methods to implement Geo Ip lookup functionality via the IGeoIpProvider interface.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.GeoIpProvider.None">
            <summary>
            No Geo Ip Provider
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.GeoIpProvider.IpStack">
            <summary>
            Geo Ip data provided by IpStack https://ipstack.com/
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.GeoIpProvider.MySql">
            <summary>
            Geo Ip data is provided by a MySql Database 
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.GeoIpProvider.MSSql">
            <summary>
            Geo Ip data is provided by a MS Sql Server Database
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.GeoIpProvider.Firebird">
            <summary>
            Geo Ip data is provided by a Firebird database
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.Enums.SystemAdminMenuType">
            <summary>
            System Admin menu types
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.SystemAdminMenuType.FirstChild">
            <summary>
            Not used at present time.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.SystemAdminMenuType.Text">
            <summary>
            Data to be shown within SystemAdmin.Plugin is raw data.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.SystemAdminMenuType.Grid">
            <summary>
            Data to be shown within SystemAdmin.Plugin is grid based data.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.SystemAdminMenuType.PartialView">
            <summary>
            Data to be shown within SystemAdmin.Plugin comes from a partial view provided by the implementor.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.SystemAdminMenuType.Map">
            <summary>
            Data to be shown within SystemAdmin.Plugin is map related data.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.SystemAdminMenuType.FormattedText">
            <summary>
            Data to be shown within SystemAdmin.Plugin is raw text formatted using html.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.Enums.ValidateRequestResult">
            <summary>
            Validate Request Results
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.Undetermined">
            <summary>
            State unknown
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.TooManyRequests">
            <summary>
            Ip has too many requests
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.PossibleSQLInjectionAttack">
            <summary>
            Enough keywords to suggest may be a SQL injection attack
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.SQLInjectionAttack">
            <summary>
            Enough keywords to determine this is a SQL injection attack
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.PossibleSpiderBot">
            <summary>
            Determines that the request is probably generated from a spider or bot
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.SpiderBot">
            <summary>
            Determines that the request is generated from a spider or bot
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.PossibleHackAttempt">
            <summary>
            Enough keywords to suggest this maybe a hack attempt
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.HackAttempt">
            <summary>
            Enough keywords to determine this is a hack attempt
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.IpWhiteListed">
            <summary>
            IP Address is white listed
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.IpBlackListed">
            <summary>
            IP Address is black listed
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.SearchEngine">
            <summary>
            IP address is a search engine
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.Enums.ValidateRequestResult.BanRequested">
            <summary>
            A Ban has been requested on the IP Address
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.DynamicLoadResult">
            <summary>
            Result enum for dynamically adding plugin modules using IPluginHelperService interface.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.DynamicLoadResult.Success">
            <summary>
            Plugin module was dynamically added to the list of available plugins.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.DynamicLoadResult.Failed">
            <summary>
            Failed to load the module as an available plugin.
            </summary>
        </member>
        <member name="F:SharedPluginFeatures.DynamicLoadResult.AlreadyLoaded">
            <summary>
            The module was already loaded as a plugin module within the PluginManager.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.HtmlHelper">
            <summary>
            Html Helper class, contains extension methods and other methods for use within MVC application
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.HtmlHelper.RouteFriendlyName(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String@)">
            <summary>
            Extension Method
            
            Returns a route friendly name, one that will not require html encoding where spaces are separated by a dash and only alpha numeric characters are returned.
            </summary>
            <param name="_">IHtmlHelper instance that is being extended</param>
            <param name="s">Text to be transformed into a route friendly name</param>
            <returns>string.  Route friendly name.</returns>
        </member>
        <member name="M:SharedPluginFeatures.HtmlHelper.RouteFriendlyName(System.String@)">
            <summary>
            Returns a route friendly name, one that will not require html encoding where spaces are separated by a dash and only alpha numeric characters are returned.
            </summary>
            <param name="name"></param>
            <returns>string.  Route friendly name.</returns>
        </member>
        <member name="T:SharedPluginFeatures.IBreadcrumbService">
            <summary>
            This interface is implemented by the Breadcrumb.Plugin and allows plugins to add dynamic plugins 
            to the list of available plugins managed.  Especially useful if you have dynamic data that can
            not use the BreadcrumbAttribute.
            
            An instance of this interface is available using the DI container.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IBreadcrumbService.AddBreadcrumb(System.String@,System.String@,System.Boolean@)">
            <summary>
            Adds a dynamic breadcrumb to managed list of breadcrumbs.
            </summary>
            <param name="name">Name of breadcrumb</param>
            <param name="route">Route the breadcrumb will use.</param>
            <param name="hasParameters">Indicates that the route contains parameters.</param>
        </member>
        <member name="M:SharedPluginFeatures.IBreadcrumbService.AddBreadcrumb(System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Adds a dynamic breadcrumb to managed list of breadcrumbs.
            </summary>
            <param name="name">Name of breadcrumb</param>
            <param name="route">Route the breadcrumb will use.</param>
            <param name="parentRoute">Route used by the parent breadcrumb.</param>
            <param name="hasParameters">Indicates that the route contains parameters.</param>
        </member>
        <member name="T:SharedPluginFeatures.IConfigureApplicationBuilder">
            <summary>
            Plugin modules which need to configure the IApplicationBuilder should implement an instance
            of this interface.  When the AspNetCore.PluginManager loads it will call each instance
            as part of the startup configuration.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IConfigureApplicationBuilder.ConfigureApplicationBuilder(Microsoft.AspNetCore.Builder.IApplicationBuilder@)">
            <summary>
            Provides an opportunity for plugins to configure the application builder.
            </summary>
            <param name="applicationBuilder">IApplicationBuilder instance.</param>
        </member>
        <member name="T:SharedPluginFeatures.IConfigureMvcBuilder">
            <summary>
            Plugin modules which need to configure the IMvcBuilder should implement an instance
            of this interface.  When the AspNetCore.PluginManager loads it will call each instance
            as part of the startup configuration.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IConfigureMvcBuilder.ConfigureMvcBuilder(Microsoft.Extensions.DependencyInjection.IMvcBuilder@)">
            <summary>
            Provides an opportunity for plugins to configure Mvc Builder.
            </summary>
            <param name="mvcBuilder">IMvcBuilder instance that can be configure.</param>
        </member>
        <member name="T:SharedPluginFeatures.ICultureProvider">
            <summary>
            This interface is implemented by the Localization.Plugin module and can be used to 
            determine which cultures are currently supported.  An instance of this interface is
            available via the DI container.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ICultureProvider.IsCultureValid(System.Globalization.CultureInfo@)">
            <summary>
            Determines whether a specific culture is valid and implemented by the localization
            plugin module.
            </summary>
            <param name="cultureInfo">CultureInfo instance being checked.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharedPluginFeatures.ICultureProvider.AvailableCultures">
            <summary>
            Retrieves a list of available culture codes within the Localization.Plugin module.
            </summary>
            <returns>string[]</returns>
        </member>
        <member name="T:SharedPluginFeatures.IDocumentationService">
            <summary>
            Provides services that enable DocumentationPlugin to build documentation based on 
            xml documentation files generated by the compiler as well as custom documents.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.GetDocumentationFiles">
            <summary>
            Retrieves a list of all system generated documentation files.
            </summary>
            <returns>:ist&lt;string&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.GetDocuments">
            <summary>
            Returns a list of all available documents which have been dynamically loaded from xml documentation files.
            </summary>
            <returns>List&lt;Document&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.GetCustomData(System.String@,System.String@)">
            <summary>
            Returns custom text for an indiviudual property within the Documentation.
            </summary>
            <param name="name">Name of custom data to be returned.</param>
            <param name="defaultValue">Default value that will be used.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.GetCustomSortOrder(System.String@,System.Int32@)">
            <summary>
            Returns the custom sort order for a document
            </summary>
            <param name="name">Document name</param>
            <param name="defaultValue">Default Value if no value has been stored.</param>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.ProcessDocument(Shared.Docs.Document@)">
            <summary>
            Processes a document, providing an opportunity to obtain custom property values
            </summary>
            <param name="document">Document to be processed.</param>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.ProcessDocumentField(Shared.Docs.DocumentField@)">
            <summary>
            Processes a document field, providing an opportunity to obtain custom property values
            </summary>
            <param name="field">DocumentField to be processed.</param>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.ProcessDocumentMethod(Shared.Docs.DocumentMethod@)">
            <summary>
            Processes a document method, providing an opportunity to obtain custom property values
            </summary>
            <param name="method">DocumentField to be processed.</param>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.ProcessDocumentMethodParameter(Shared.Docs.DocumentMethodParameter@)">
            <summary>
            Processes a document parameter, providing an opportunity to obtain custom property values
            </summary>
            <param name="parameter">DocumentMethodParameter to be processed.</param>
        </member>
        <member name="M:SharedPluginFeatures.IDocumentationService.ProcessDocumentProperty(Shared.Docs.DocumentProperty@)">
            <summary>
            Processes a document property, providing an opportunity to obtain custom property values
            </summary>
            <param name="property">DocumentProperty to be processed.</param>
        </member>
        <member name="T:SharedPluginFeatures.IErrorManager">
            <summary>
            Interface which helps determine how an error is handled within a website.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IErrorManager.ErrorRaised(SharedPluginFeatures.ErrorInformation@)">
            <summary>
            Indicates that an error has been raised and provides details of the error.
            </summary>
            <param name="errorInformation">Exception details for the error raised.</param>
        </member>
        <member name="M:SharedPluginFeatures.IErrorManager.MissingPage(System.String@,System.String@)">
            <summary>
            Indicates that a page has been requested but not found within the available routes.
            
            Applications can replace the page with an existing one which will be used to redirect to instead of showing the user a 404 error page.
            </summary>
            <param name="path"></param>
            <param name="replacePath"></param>
            <returns>bool.  True if the route has been replaced, otherwise false.</returns>
        </member>
        <member name="T:SharedPluginFeatures.IGeoIpDataService">
            <summary>
            Interface to obtain GeoIp details for a specific Ip Address
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IGeoIpDataService.GetIPAddressDetails(System.String@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Int64@)">
            <summary>
            Obtains the Geo Ip details pertaining to an Ip Address
            </summary>
            <param name="ipAddress">Ip Address</param>
            <param name="countryCode">Country code where the Ip address is located.</param>
            <param name="region">Region where the Ip address is located.</param>
            <param name="cityName">Name of the city where the Ip address is located.</param>
            <param name="latitude">Latitude for the Ip address.</param>
            <param name="longitude">Longitude for the Ip address.</param>
            <param name="ipUniqueID">Unique Id for the Ip address.</param>
            <returns></returns>
        </member>
        <member name="T:SharedPluginFeatures.IGeoIpProvider">
            <summary>
            Provides a mechanism whereby the host application can obtain GeoIp related data for an Ip Address.
            
            This is typically implemented by the GeoIpPlugin and SieraDeltaGeoIpPlugin modules.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IGeoIpProvider.GetIpAddressDetails(System.String@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Method for obtaing Geo Ip specific data for an Ip address.
            </summary>
            <param name="ipAddress">in string.  Ip address.  Geo Ip information specific to this address will be returned.</param>
            <param name="countryCode">out string.  Code of country where Ip address is located.</param>
            <param name="region">out string.  Region within a country where the Ip address is located.</param>
            <param name="cityName">out string.  Name of the city within a region where the Ip address is located.</param>
            <param name="latitude">out decimal.  Latitude  where the Ip address is located.</param>
            <param name="longitude">out decimal.  Longitude  where the Ip address is located.</param>
            <param name="uniqueId">out long.  Unique Id used internally by the provider to refer to the Geo Ip data.</param>
            <param name="ipFrom">out long.  Start of range which the Ip address belongs.</param>
            <param name="ipTo">out long.  End of range which the Ip address belongs.</param>
            <returns></returns>
        </member>
        <member name="T:SharedPluginFeatures.IGeoIpStatistics">
            <summary>
            This interface is implemented by the GeoIpPlugin module and is available via DI.
            It is designed to provide information on hown many GeoIp records were loaded and how long it took.
            
            This method is deprecated and should not be used by new modules as it will be removed in future versions.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IGeoIpStatistics.RecordsLoaded">
            <summary>
            Returns the number of records loaded.
            </summary>
            <returns>uint</returns>
        </member>
        <member name="M:SharedPluginFeatures.IGeoIpStatistics.LoadTime">
            <summary>
            Total time to load records.
            </summary>
            <returns>TimeSpan</returns>
        </member>
        <member name="T:SharedPluginFeatures.IGeoIpStatisticsUpdate">
            <summary>
            This interface is implemented internally by the GeoIpPlugin module and is not available 
            via DI or any other method.  Instead it is used to provide information on hown many GeoIp
            records were loaded and how long it took.
            
            See IGeoIpStatistics for information on retrieving statistics.
            
            This method is deprecated and should not be used by new modules as it will be removed in future versions.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IGeoIpStatisticsUpdate.Retrieve(System.Int64@,System.UInt32@)">
            <summary>
            Indicates that retrieval is finished
            </summary>
            <param name="milliseconds">Total number of milliseconds taken to load the data.</param>
            <param name="recordCount">Total number of records loaded.</param>
        </member>
        <member name="T:SharedPluginFeatures.IInitialiseEvents">
            <summary>
            Provides initialisation events that can be used by plugins to affect the configuration
            of services and the application.
            
            This interface is designed to give pre and post notifications, each plugin module that 
            implements IPlugin will automatically receive the events as part of initialisation.
            
            This is particularly useful should a plugin module wish to register an interface for 
            example that is required when another plugin module is being configured or to provide
            a default implementation of an interface should no plugin have registered one whilst 
            being configured.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IInitialiseEvents.BeforeConfigure(Microsoft.AspNetCore.Builder.IApplicationBuilder@,Microsoft.AspNetCore.Hosting.IHostingEnvironment@)">
            <summary>
            Indicates that the Configure method will be called on IPlugin instances.
            </summary>
            <param name="app">IApplicationBuilder instance.</param>
            <param name="env">IHostingEnvironment instance.</param>
        </member>
        <member name="M:SharedPluginFeatures.IInitialiseEvents.AfterConfigure(Microsoft.AspNetCore.Builder.IApplicationBuilder@,Microsoft.AspNetCore.Hosting.IHostingEnvironment@)">
            <summary>
            Indicates that all plugins have had an opportunity to load configuration data.
            </summary>
            <param name="app">IApplicationBuilder instance.</param>
            <param name="env">IHostingEnvironment instance.</param>
        </member>
        <member name="M:SharedPluginFeatures.IInitialiseEvents.BeforeConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection@)">
            <summary>
            Indicates that the ConfigureServices method on each IPlugin implementation will
            be called.
            </summary>
            <param name="services">IServiceCollection instance.</param>
        </member>
        <member name="M:SharedPluginFeatures.IInitialiseEvents.AfterConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection@)">
            <summary>
            Indicates that all IPlugin instances have had an opportunity to configure services.
            </summary>
            <param name="services">IServiceCollection instance.</param>
        </member>
        <member name="T:SharedPluginFeatures.IIpManagement">
            <summary>
            This interface is implemented by the BadEgg.Plugin module and is used to manage 
            black and white listed Ip addresses.
            
            BadEgg Plugin module does not store any of these Ip addresses but requires that
            the host application informs it which Ip addresses are black or white listed.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IIpManagement.AddBlackListedIp(System.String@)">
            <summary>
            Adds an address to the black listed address list.  Any request from an Ip
            address in this list will be rejected whilst the pipeline is iterated when 
            a request is made.
            </summary>
            <param name="ipAddress">Ip address</param>
        </member>
        <member name="M:SharedPluginFeatures.IIpManagement.AddWhiteListedIp(System.String@)">
            <summary>
            Adds an address to the whilte listed address list.  Any request from an Ip
            address in this list will never be rejected when making a request to the
            application.
            </summary>
            <param name="ipAddress">Ip address</param>
        </member>
        <member name="M:SharedPluginFeatures.IIpManagement.RemoveIpAddress(System.String@)">
            <summary>
            Removes an Ip address from both the black and whilte address lists.  
            </summary>
            <param name="ipAddress">Ip address</param>
        </member>
        <member name="M:SharedPluginFeatures.IIpManagement.ClearAllIpAddresses">
            <summary>
            Removes all Ip addresses from both black and white lists.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.IIpValidation">
            <summary>
            This interface should be implemented by the host application and provides a conduit for 
            notifications events for Ip addresses being monitored within BadEgg.Plugin module.
            
            This interface, when implemented can be used by applications to evaluate how Ip
            addresses are behaving whilst navigating their website.
            
            See BadEgg.Plugin and BadEggAttribute for information on how to validate routes 
            within an application.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IIpValidation.ConnectionAdd(System.String@)">
            <summary>
            Indicates a new connection has been made by a client Ip.
            </summary>
            <param name="ipAddress">Ip Address that has connected.</param>
        </member>
        <member name="M:SharedPluginFeatures.IIpValidation.ConnectionRemove(System.String@,System.Double@,System.UInt64@,System.TimeSpan@)">
            <summary>
            Indicates that a connection has expired and is about to be removed.  Host applications
            can evaluate how the Ip used the website and 
            </summary>
            <param name="ipAddress">Ip address being monitored.</param>
            <param name="hits">Average number of hits per minute.</param>
            <param name="requests">Total number of requests made.</param>
            <param name="duration">Total time the client was active within the website.</param>
        </member>
        <member name="M:SharedPluginFeatures.IIpValidation.ConnectionReport(System.String@,System.String@,SharedPluginFeatures.Enums.ValidateRequestResult@)">
            <summary>
            Provides a report on the connection after it has been validated.
            </summary>
            <param name="ipAddress">Ip address being monitored.</param>
            <param name="queryString">Query and form data that was validated.</param>
            <param name="validation">Result of validation.</param>
        </member>
        <member name="M:SharedPluginFeatures.IIpValidation.ConnectionBan(System.String@,System.Double@,System.UInt64@,System.TimeSpan@)">
            <summary>
            Indicates that a connection has failed validation and that a request to ban the Ip address
            is made.
            </summary>
            <param name="ipAddress">Ip address being monitored.</param>
            <param name="hits">Average number of hits per minute.</param>
            <param name="requests">Total number of requests made.</param>
            <param name="duration">Total time the client was active within the website.</param>
            <returns>bool.  If the implementing class returns true, the Ip address will be included
            on the blacklist and further requests will be denied.  If false is returned then
            no further action will be taken.</returns>
        </member>
        <member name="T:SharedPluginFeatures.ILoadSettingsService">
            <summary>
            This interface is used when initially loading the AspNetCore.PluginManager to load 
            settings it requires.  A custom implementation can be supplied during initialisation
            of the Plugin Manager which can enable the settings to be loaded from a custom data
            source.
            
            This interface will be used to load PluginSetting and PluginSettings but may be
            extended in future versions to include other initialisation data.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ILoadSettingsService.LoadSettings``1(System.String@,System.String@)">
            <summary>
            Requests that setting data be loaded for T, this could be PluginSetting or PluginSettings.
            </summary>
            <typeparam name="T">Class type</typeparam>
            <param name="jsonFile">jsonFile to use, this can be altered for custom implementations.</param>
            <param name="name">Name of settings to be loaded.</param>
            <returns>Instance of T</returns>
        </member>
        <member name="M:SharedPluginFeatures.ILoadSettingsService.LoadSettings``1(System.String@)">
            <summary>
            Requests that setting data be loaded for T, this could be PluginSetting or PluginSettings.
            </summary>
            <typeparam name="T">Class type</typeparam>
            <param name="name">Name of settings to be loaded.</param>
            <returns>Instance of T</returns>
        </member>
        <member name="T:SharedPluginFeatures.ILogger">
            <summary>
            Generic interface provided where plugin modules and all other parts of the system can add data to a log file.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ILogger.AddToLog(SharedPluginFeatures.Enums.LogLevel@,System.String@)">
            <summary>
            Adds data to the log file.
            </summary>
            <param name="logLevel">LogLevel enum indicating the type of log entry</param>
            <param name="data">Data to be logged.</param>
        </member>
        <member name="M:SharedPluginFeatures.ILogger.AddToLog(SharedPluginFeatures.Enums.LogLevel@,System.Exception@)">
            <summary>
            Logs an exception with the log file and also creates an additional exception log entry detailing the exception, call stack etc.
            </summary>
            <param name="logLevel">LogLevel enum indicating the type of log entry</param>
            <param name="exception">Exception that was raised.</param>
        </member>
        <member name="M:SharedPluginFeatures.ILogger.AddToLog(SharedPluginFeatures.Enums.LogLevel@,System.Exception@,System.String)">
            <summary>
            Logs an exception with the log file and also creates an additional exception log entry detailing the exception, call stack etc.
            </summary>
            <param name="logLevel">LogLevel enum indicating the type of log entry</param>
            <param name="exception"></param>
            <param name="data">Additional data to be logged with the exception.</param>
        </member>
        <member name="T:SharedPluginFeatures.IMemoryCache">
            <summary>
            MemoryCachePlugin implements an instance of IMemoryCache, and add the instance to the DI container.  
            Plugins and other modules can obtain an instance of IMemoryCache which can be used to store and 
            retrieve items easily from a designated cache.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IMemoryCache.GetShortCache">
            <summary>
            The short cache is inteded to hold items for upto 5 minutes, after which items will expire.
            
            This can be useful for storing short term items like price information etc, that could
            change regularly.
            
            There is no limit to the items that can be cached and cache retrieval is extremely quick.
            </summary>
            <returns>CacheManager instance</returns>
        </member>
        <member name="M:SharedPluginFeatures.IMemoryCache.GetCache">
            <summary>
            The long cache is inteded to hold items for upto 2 hours, after which items will expire.
            
            This can be useful for storing medium term items like product information etc, that doesn't
            change too regularly but will help speed up requests when retrieving.
            
            There is no limit to the items that can be cached and cache retrieval is extremely quick.
            </summary>
            <returns>CacheManager instance</returns>
        </member>
        <member name="M:SharedPluginFeatures.IMemoryCache.ResetCaches">
            <summary>
            Resets all caches, clears all items.
            </summary>
        </member>
        <member name="T:SharedPluginFeatures.IPlugin">
            <summary>
            This interface should be implemented by each plugin module, without this interface being 
            implemented AspNetCore.PluginManager would not automatically load it when the appliction
            starts.
            
            This class will be called by the Plugin Manager and will provide an opportunity for the 
            plugin to configure its services and application requirements within the MVC application.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IPlugin.Initialise(SharedPluginFeatures.ILogger)">
            <summary>
            Notifies the plugin that the plugin module is being initialised.
            </summary>
            <param name="logger">ILogger instance used to hold log data, should the plugin
            need to log any intialisation data.  Each plugin should store this instance
            for later use if logging is a requirement.</param>
        </member>
        <member name="M:SharedPluginFeatures.IPlugin.Finalise">
            <summary>
            Notifies the plugin module that it is being closed and removed and it should
            uninitialise any resources that it has used.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IPlugin.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Provides the plugin module an opportunity to register application specific 
            requirements that it provides.
            </summary>
            <param name="app">IApplicationBuilder instance.</param>
            <param name="env">IHostingEnvironment instance.</param>
        </member>
        <member name="M:SharedPluginFeatures.IPlugin.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Provides the plugin module with an opportunity to register any services
            that it provides.
            </summary>
            <param name="services">IServiceCollection instance where further services can be registerd.</param>
        </member>
        <member name="T:SharedPluginFeatures.IPluginClassesService">
            <summary>
            IPluginClassesService is implemented by the AspNetCore.PluginManager and is available
            using DI.
            
            This interface provides a conduit for the application or other plugins to quickly 
            search all plugins for classes that implement or extend a specific class or interface.
            
            This can be particularly useful if for instance you define menu items within plugins, 
            the host can search all plugins for the menu class, and get a list of all objects, 
            instantiated or not.
            
            The plugin can then use the interfaces to dynamically create menu items.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IPluginClassesService.GetPluginClasses``1">
            <summary>
            Retrieves a list of instantiated classes that either descend from, or 
            implement T.
            
            If a class requires parameters for instantiating, then they will be sought
            from the DI container, as long as the parameters are available then an 
            instance of the class will be created.
            </summary>
            <typeparam name="T">Class or interface to be searched for.</typeparam>
            <returns>List&lt;T&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.IPluginClassesService.GetPluginClassTypes``1">
            <summary>
            Retrieves a list of classes as types, that either descend from or implement
            T.
            
            This method will not create instances of the classes found, instead it will 
            return the list and the calling module can choose how it wants to use them.
            </summary>
            <typeparam name="T">Class or interface to be searched for.</typeparam>
            <returns>List&lt;Type&gt;</returns>
        </member>
        <member name="T:SharedPluginFeatures.IPluginHelperService">
            <summary>
            Provides a mechanism for the host application or other plugin modules to query the 
            AspNetCore.PluginManager for specific data.
            
            This interface is implemented by the Plugin Manager and registered for use within the 
            DI contianer when loading.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IPluginHelperService.PluginLoaded(System.String@,System.Int32@)">
            <summary>
            Determines whether a plugin module has been loaded.
            </summary>
            <param name="pluginLibraryName">The name of the plugin module, i.e. SeoPlugin.dll</param>
            <param name="version">out int.  Returns the internal plugin version of the plugin if found.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharedPluginFeatures.IPluginHelperService.AddAssembly(System.Reflection.Assembly@)">
            <summary>
            Dynamically adds a non plugin assembly to the list of managed plugins.
            </summary>
            <param name="assembly">Assembly instance of assembly to be added to the list of available plugins.</param>
            <returns></returns>
        </member>
        <member name="T:SharedPluginFeatures.IPluginTypesService">
            <summary>
            Allows plugin modules to retrieve a list of class Types that implement a specific attribute
            either at a class or method level.
            
            None of the Types returned are instantiated instances.
            
            This can only return Types that have been made available from within a plugin module that
            has been registered with AspNetCore.PluginManager.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IPluginTypesService.GetPluginTypesWithAttribute``1">
            <summary>
            Return a list of all class types that implement a specific attribute T at the class
            or method level.
            </summary>
            <typeparam name="T">Attribute that is being sought.</typeparam>
            <returns>List&lt;Type&gt;</returns>
        </member>
        <member name="T:SharedPluginFeatures.IPluginVersion">
            <summary>
            This interface should be implemented by all plugin modules which need to specify which 
            internal version of the AspNetCore.PluginManager is used.  The default is one (1).
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IPluginVersion.GetVersion">
            <summary>
            Retrieves the currently supported version.  If the value is outside of the valid range
            of internal versions that are in use, then the default one (1) is used.
            </summary>
            <returns>ushort</returns>
        </member>
        <member name="T:SharedPluginFeatures.IRouteDataService">
            <summary>
            This interface is implemented by the AspNetCore.PluginManager and will determine a valid
            route based on the class or public action method for a Type.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IRouteDataService.GetRouteFromClass(System.Type,Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
            <summary>
            Provides the route associated with a class, this will be based on the controller name
            and if supplied the Route attributes placed on the class.
            </summary>
            <param name="type">Type to be checked for route data.</param>
            <param name="routeProvider">IActionDescriptorCollectionProvider instance obtained using DI.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.IRouteDataService.GetRouteFromMethod(System.Reflection.MethodInfo@,Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider@)">
            <summary>
            Provides the route associated with an action method, this will be based on the name of the action and 
            controller and if supplied the Route attributes placed on the class and method in question.
            </summary>
            <param name="method"></param>
            <param name="routeProvider">IActionDescriptorCollectionProvider instance obtained using DI.</param>
            <returns></returns>
        </member>
        <member name="T:SharedPluginFeatures.ISeoProvider">
            <summary>
            An instance of this interface should be managed by the host application and is used
            by the SeoPlugin module to retrieve Seo data that is placed into the request pipeline
            which can be used by an individual route to provide custom Seo data.
            
            This allows applications to provide a single source for Seo data for the entire application.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.GetSeoDataForRoute(System.String@,System.String@,System.String@,System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Retrieves Seo data for a route.
            </summary>
            <param name="route">Route in lowercase.</param>
            <param name="title">out string.  Route title.</param>
            <param name="metaDescription">out string.  Route meta description.</param>
            <param name="author">out string.  Route author.</param>
            <param name="keywords">out List&lt;string&gt;.  Route keywords.</param>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.UpdateTitle(System.String@,System.String@)">
            <summary>
            Notification to update the title for a specific route.
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="title">New title for route.</param>
            <returns>bool if route title updated, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.UpdateDescription(System.String@,System.String@)">
            <summary>
            Update description
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="description">New description for the route.</param>
            <returns>bool if route description updated, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.UpdateAuthor(System.String@,System.String@)">
            <summary>
            Updates the author for a route.
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="author">New author for the route.</param>
            <returns>bool if route author updated, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.AddKeyword(System.String@,System.String@)">
            <summary>
            Adds a keyword for the route.
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="keyword">Keyword to be added.</param>
            <returns>bool if route keyword is added, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.RemoveKeyword(System.String@,System.String@)">
            <summary>
            Keyword to be removed.
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="keyword">Keyword to be removed.</param>
            <returns>bool if route keyword is removed, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.AddKeywords(System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Group of keywords to be added.
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="keyword">Keywords to be added.</param>
            <returns>bool if route keywords are removed, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISeoProvider.RemoveKeywords(System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Group of keywords to be removed.
            </summary>
            <param name="route">Route which will be updated.</param>
            <param name="keyword">Keywords to be removed.</param>
            <returns>bool if route keywords are removed, otherwise false.</returns>
        </member>
        <member name="T:SharedPluginFeatures.ISettingsProvider">
            <summary>
            This interface can be used by all plugin modules to load setting and configuration data.
            
            The default implementation which is loaded if no other plugin registers an instance uses 
            appsettings.json to store configuration data to be used by Plugins.
            
            An instance of this interface is available via the DI container, any custom implementations
            must be configured to be used in the DI contaner when being initialised.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ISettingsProvider.GetSettings``1(System.String@,System.String@)">
            <summary>
            Retrieves settings for Class T
            </summary>
            <typeparam name="T">Class who's settings are being requested.</typeparam>
            <param name="storage">Name of storage to be used.</param>
            <param name="sectionName">Name of configuration data required.</param>
            <returns>Instance of type T initialised with the required settings.</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISettingsProvider.GetSettings``1(System.String@)">
            <summary>
            Retrieves settings for Class T
            </summary>
            <typeparam name="T">Class who's settings are being requested.</typeparam>
            <param name="sectionName">Name of configuration data required.</param>
            <returns>Instance of type T initialised with the required settings.</returns>
        </member>
        <member name="T:SharedPluginFeatures.ISharedPluginHelper">
            <summary>
            Used as a service class to provide information to utilise specific plugin methods.
            
            An instance of this interface should be registered by the host application and be 
            made available via the DI container.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ISharedPluginHelper.BuildMainMenu">
            <summary>
            Requests that dynamic menu items are retrieved from all available plugins.
            </summary>
            <returns>List&lt;MainMenuItem&gt;</returns>
        </member>
        <member name="T:SharedPluginFeatures.IShoppingCartService">
            <summary>
            This interface should be implemented by the host application or a type of middleware or
            business object layer and should be available to the ShoppingCart.Plugin via DI.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IShoppingCartService.GetSummary(System.Int64@)">
            <summary>
            Retrieves a summary for the specified cart id.
            </summary>
            <param name="shoppingCartId">ShoppingCartId, unique value identifying a customers shopping cart.</param>
            <returns>ShoppingCartSummary</returns>
        </member>
        <member name="M:SharedPluginFeatures.IShoppingCartService.GetEncryptionKey">
            <summary>
            Retrieves the key that is used to encrypt and decrypt the shopping cart data held
            within a users cookie.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:SharedPluginFeatures.ISystemAdminHelperService">
            <summary>
            This class is implemented internallyby the SystemAdmin.Plugin and is used to manage
            System Admin Menu Items.  An instance of this interface is not available for general
            use by other modules.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.ISystemAdminHelperService.GetSystemAdminMainMenu">
            <summary>
            Retrieves a list of Main menu items.
            </summary>
            <returns>List&lt;SystemAdminMainMenu&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISystemAdminHelperService.GetSystemAdminDefaultMainMenu">
            <summary>
            Retrieves the Default main menu.
            </summary>
            <returns>SystemAdminMainMenu</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISystemAdminHelperService.GetSystemAdminMainMenu(System.Int32@)">
            <summary>
            Retrieves a specific menu item by Id
            </summary>
            <param name="id">Id of menu item.</param>
            <returns>SystemAdminMainMenu</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISystemAdminHelperService.GetSubMenuItems">
            <summary>
            Retrieves all sub menu items.
            </summary>
            <returns>List&lt;SystemAdminSubMenu&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISystemAdminHelperService.GetSubMenuItems(System.String@)">
            <summary>
            Retrieves all sub menus for a specific menu item.
            </summary>
            <param name="mainMenuName">Name of menu item.</param>
            <returns>List&lt;SystemAdminSubMenu&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.ISystemAdminHelperService.GetSubMenuItem(System.Int32@)">
            <summary>
            Retrieves a specific sub menu.
            </summary>
            <param name="id">Id of submenu</param>
            <returns>SystemAdminSubMenu</returns>
        </member>
        <member name="T:SharedPluginFeatures.IUserCultureChangeProvider">
            <summary>
            Provides a mechanism for updating the current user session with updated culture information.
            
            This interface is registered within the DI container and is implemented by UserSessionMiddleware.Plugin module.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IUserCultureChangeProvider.CultureChanged(Microsoft.AspNetCore.Http.HttpContext@,Shared.Classes.UserSession@,System.Globalization.CultureInfo@)">
            <summary>
            Indicates the current culture has been changed for the user.
            </summary>
            <param name="httpContext">Valid HttpContext</param>
            <param name="userSession">UserSession whos culture has changed.</param>
            <param name="cultureInfo">Culture being used by the user.</param>
        </member>
        <member name="T:SharedPluginFeatures.IUserSessionService">
            <summary>
            Provides an interface for saving UserSession data.
            
            This interface needs to be implemented by the host application which can control how the 
            session data is stored for the application.  The implementation must be registered as a service available
            usind IoC through the default DI container.
            
            Session data is managed by it's own thread and all implementation of this method must be thread safe.
            
            By using a seperate thread the current pipeline requests are not delayed waiting for data to be saved.
            
            When implementing these methods, the hosting class must update the SaveStatus property for the 
            session and page data.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.IUserSessionService.Save(Shared.Classes.UserSession@)">
            <summary>
            Indicates the current session requires saving.
            </summary>
            <param name="userSession">UserSession that needs to be saved.</param>
        </member>
        <member name="M:SharedPluginFeatures.IUserSessionService.Retrieve(System.String@,Shared.Classes.UserSession@)">
            <summary>
            Requests that a previously saved session is loaded.  Mostly used if implemented within a web farm and
            the users request is passed to a different server for processing.
            </summary>
            <param name="userSessionId">Id of session required.</param>
            <param name="userSession">UserSession instance that should be populated with user session data.</param>
        </member>
        <member name="M:SharedPluginFeatures.IUserSessionService.Closing(Shared.Classes.UserSession@)">
            <summary>
            Indicates the current session has expired and will be removed from the list of monitored sessions 
            and may require saving.
            </summary>
            <param name="userSession">UserSession being expired.</param>
        </member>
        <member name="M:SharedPluginFeatures.IUserSessionService.SavePage(Shared.Classes.UserSession@)">
            <summary>
            Indicates tha page views requires saving.
            
            When implementing this methods, the hosting class must update the SaveStatus property for the 
            session and page data.
            </summary>
            <param name="pageView"></param>
        </member>
        <member name="M:SharedPluginFeatures.IUserSessionService.Created(Shared.Classes.UserSession@)">
            <summary>
            Indicates a session has been created and needs to be saved.
            
            When implementing this methods, the hosting class must update the SaveStatus property for the 
            session and page data.
            </summary>
            <param name="userSession">UserSession that has been created.</param>
        </member>
        <member name="T:SharedPluginFeatures.INotificationListener">
            <summary>
            This interface is used to create instances of a class that can register themselves with INotificationService
            in order to receive Notifications for Inter Plugin Event Notification.
            
            An instance of this class will only receive notifications for events to which they register to.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.INotificationListener.EventRaised(System.String@,System.Object@,System.Object@,System.Object@)">
            <summary>
            This method is used to notify registered listeners that an event has been raised and is generally used in order 
            to obtain a response.  If called then the active thread is blocked whilst processing is completed and can be 
            used by callers to ask a question which needs a response.
            </summary>
            <param name="eventId">Name of the event being raised.</param>
            <param name="param1">User defined parameter value, pertinent to the event.</param>
            <param name="param2">User defined parameter value, pertinent to the event.</param>
            <param name="result">User defined result to be passed back to the class that raised the event.</param>
            <returns>bool.  If a listener retures true, then the answer is deemed to be received and no other listeners will 
            be called and the result will be passed straight back to the class where the event was raised.  If false, the 
            next listener in the chain will be called.</returns>
        </member>
        <member name="M:SharedPluginFeatures.INotificationListener.EventRaised(System.String@,System.Object@,System.Object@)">
            <summary>
            This method is used to notify registered listeners that an event has been raised and is generally used when 
            no response is required.  If called then the active thread is not blocked whilst processing is completed.
            </summary>
            <param name="eventId">Name of the event being raised.</param>
            <param name="param1">User defined parameter value, pertinent to the event.</param>
            <param name="param2">User defined parameter value, pertinent to the event.</param>
        </member>
        <member name="M:SharedPluginFeatures.INotificationListener.GetEvents">
            <summary>
            This method is called after a call to RegisterListener, if the function returns null, an empty list or a list 
            which contains an empty or null string then an Invalid Operation exception will be raised.  
            
            An instance of this interface can register multiple events.
            </summary>
            <returns>List&lt;string&gt;.  List of events which the listener is interested in receiving.</returns>
        </member>
        <member name="T:SharedPluginFeatures.INotificationService">
            <summary>
            This interface is designed to allow callers to register and unregister INotificationListener objects and raise events throughout the system.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.INotificationService.RaiseEvent(System.String@,System.Object@,System.Object@,System.Object@)">
            <summary>
            Raises an event that will be broadcast to all listeners.  This method will send the message within the same thread, this 
            could incur slight delays whilst the message is being responded to and should be used only when a response is 
            required for processing purposes.
            </summary>
            <param name="eventId">Name of the event being raised.</param>
            <param name="param1">User defined parameter value, pertinent to the event.</param>
            <param name="param2">User defined parameter value, pertinent to the event.</param>
            <param name="result">User defined result obtained by a listener processing the event.</param>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.INotificationService.RaiseEvent(System.String@,System.Object@,System.Object@)">
            <summary>
            Raises an event that will be broadcast to all listeners.  This method will send the message within a separate 
            thread, this ensures there are no delays to the current thread whilst the message is being processed and should 
            be used when no response is required by the class raising the event.
            </summary>
            <param name="eventId">Name of the event being raised.</param>
            <param name="param1">User defined parameter value, pertinent to the event.</param>
            <param name="param2">User defined parameter value, pertinent to the event.</param>
        </member>
        <member name="M:SharedPluginFeatures.INotificationService.RaiseEvent(System.String@,System.Object@)">
            <summary>
            Raises an event that will be broadcast to all listeners.  This method will send the message within a separate 
            thread, this ensures there are no delays to the current thread whilst the message is being processed and should 
            be used when no response is required by the class raising the event.
            </summary>
            <param name="eventId">Name of the event being raised.</param>
            <param name="param1">User defined parameter value, pertinent to the event.</param>
        </member>
        <member name="M:SharedPluginFeatures.INotificationService.RaiseEvent(System.String@)">
            <summary>
            Raises an event that will be broadcast to all listeners.  This method will send the message within a separate 
            thread, this ensures there are no delays to the current thread whilst the message is being processed and should 
            be used when no response is required by the class raising the event.
            </summary>
            <param name="eventId">Name of the event being raised.</param>
        </member>
        <member name="M:SharedPluginFeatures.INotificationService.RegisterListener(SharedPluginFeatures.INotificationListener@)">
            <summary>
            Registers an INotificationListener for receiving event notifications.
            </summary>
            <param name="listener">INotificationListener instance that is being registered.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharedPluginFeatures.INotificationService.UnregisterListener(SharedPluginFeatures.INotificationListener@)">
            <summary>
            Unregisters an INotificationListener class from receiving event notifications.
            </summary>
            <param name="listener">INotificationListener instance being unregistered.</param>
            <returns>bool</returns>
        </member>
        <member name="T:SharedPluginFeatures.BaseController">
            <summary>
            Base Controller for use as a base for all controllers to obtain information from plugins loaded through PluginManager.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetUserSession">
            <summary>
            Retrieves the current users UserSession instance which contains data for the user.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <returns>null if the UserSessionMiddleware.Plugin is not loaded otherwise a valid UserSession item representing 
            the current users session.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.IsUserLoggedIn">
            <summary>
            Determines if the current user is logged in or not.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <returns>True if the user is logged in, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.UserGuid">
            <summary>
            Retrieves a unique guid representing the currently logged in user.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <returns>Guid.Empty if user is not logged in or a guid is not used, otherwise a valid unique guid for the user.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.UserId">
            <summary>
            Retrieves a unique id representing the currently logged in user.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <returns>Valid user id if the user is logged in, otherwise -1 will be returned.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetSessionId">
            <summary>
            Retrieves a unique http session id for the current users session.  This is not related
            to UserSession.
            </summary>
            <returns>string.  Unique http session id.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetCoreSessionId">
            <summary>
            Retrieves a unique http session id for the current session.  this is not related
            to UserSession
            </summary>
            <returns>string.  Unique http session id.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetBreadcrumbs">
            <summary>
            Retrieves the breadcrumbs created for the request from Breadcrumb.Plugin module.  If
            no breadcrumbs exist an empty list will be returned.
            </summary>
            <returns>List&lt;BreadcrumbItem&gt;</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetCartSummary">
            <summary>
            Returns a valid ShoppingCartSummary class representing the shopping cart
            for the current user.
            </summary>
            <returns>ShoppingCartSummary</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetDefaultTaxRate">
            <summary>
            Retrieves the default tax rate for the application.
            
            Requires ShoppingCart.Plugin module to be loaded.
            </summary>
            <returns>decimal.  Default tax rate if found, otherwise zero.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetShoppingCartId">
            <summary>
            Retrieves the current shopping cart id for the current user session.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <returns>long.  Unique shopping cart id.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.CookieExists(System.String@)">
            <summary>
            Determines whether a cookie exists or not.
            </summary>
            <param name="name">Name of the cookie.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.CookieDelete(System.String@)">
            <summary>
            Deletes an existing cookie if it exists.
            </summary>
            <param name="name">Name of the cookie.</param>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.CookieValue(System.String@,System.String@)">
            <summary>
            Retrieves the value from an existing cookie, if it exists.
            </summary>
            <param name="name">Name of the cookie.</param>
            <param name="defaultValue">Value to be returned if the cookie does not exist.</param>
            <returns>string.  Value from the cookie.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.CookieAdd(System.String@,System.String@,System.Int32@)">
            <summary>
            Adds a cookie.
            </summary>
            <param name="name">Name of the cookie.</param>
            <param name="value">Value to be stored within the cookie.</param>
            <param name="days">Number of days the cookie is valid for.  A value of 
            -1 means it will be a session cookie and will expire when the user session ends.</param>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GetIpAddress">
            <summary>
            Retrieves the Ip address for the current user session.
            
            Please note that this could be masked if the user is using a proxy service or something similar.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GrowlGet">
            <summary>
            Retreives a previously stored growl message.
            </summary>
            <returns>string.  A valid growl message if one exists, otherwise an empty string.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.GrowlAdd(System.String)">
            <summary>
            Adds a growl message which can be retrieved on the next request.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SharedPluginFeatures.BaseController.BuildPagination(System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Builds a paginated list of html li elements for display in a view where pages are required.
            </summary>
            <param name="itemCount">int.  Number of items.</param>
            <param name="itemsPerPage">int.  Number of items per page.</param>
            <param name="currentPage">int.  Current page number.</param>
            <param name="page">string.  Page or route being used to obtain pagination</param>
            <param name="parameters">string.  Parameters to be added to each page item.</param>
            <param name="previous">string.  Display text (localized or not) to be shown to indicate previous page.</param>
            <param name="next">string.  Display text (localized or not) to be shown to indicate next page.</param>
            <returns>string.  List of html li elements for pagination within a view.</returns>
        </member>
        <member name="T:SharedPluginFeatures.BaseMiddleware">
            <summary>
            Generic functions that can be used by middleware plugins to obtain generic information 
            to be used when serving requests within the pipeline.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.GetCurrentUri(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves the current Uri for the request.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>Uri</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.GetTempData(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves an instance of ITempDataDictionary used to manipulate temp data for the curent request.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns></returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.GetUserSession(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves the current users UserSession instance which contains data for the user.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>null if the UserSessionMiddleware.Plugin is not loaded otherwise a valid UserSession item representing 
            the current users session.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.IsUserLoggedIn(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Determines if the current user is logged in or not.
            
            Requires UserSessionMiddleware.Plugin module to be loaded.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>True if the user is logged in, otherwise false.</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.Route(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves the current route being requested through the pipeline.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.RouteLowered(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves the current route being requested through the pipeline in lowercase.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.RouteFileExtension(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves the file extension for the file requested in the current request in lowercase.
            
            Primarily used to determine if the request is for a static file.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.GetIpAddress(Microsoft.AspNetCore.Http.HttpContext@)">
            <summary>
            Retrieves the current Ip address for the current request.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.GetLocalIpAddresses(System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Retrieves a list of all local Ip Addresses on the current server.
            </summary>
            <param name="ipAddressList">List of HashSet&lt;string&gt; which will be populated with the ip addresses from the current computer.</param>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.CookieExists(Microsoft.AspNetCore.Http.HttpContext@,System.String@)">
            <summary>
            Determines whether a cookie exists or not.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <param name="name">Name of the cookie.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.CookieDelete(Microsoft.AspNetCore.Http.HttpContext@,System.String@)">
            <summary>
            Deletes a cookie if it exists.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <param name="name">Name of the cookie.</param>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.CookieValue(Microsoft.AspNetCore.Http.HttpContext@,System.String@,System.String@)">
            <summary>
            Retrieves the contents of a cookie.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <param name="name">Name of the cookie.</param>
            <param name="defaultValue">Value to be returned if the cookie does not exist.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.CookieValue(Microsoft.AspNetCore.Http.HttpContext@,System.String@,System.Int64@)">
            <summary>
            Retrieves the contents of a cookie.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <param name="name">Name of the cookie.</param>
            <param name="defaultValue">Value to be returned if the cookie does not exist.</param>
            <returns>long</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.CookieValue(Microsoft.AspNetCore.Http.HttpContext@,System.String@,System.String@,System.String@)">
            <summary>
            Retrieves the contents of a cookie.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <param name="name">Name of the cookie.</param>
            <param name="encryptionKey">Key used to decrypt the contents when retrieved.</param>
            <param name="defaultValue">Value to be returned if the cookie does not exist.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseMiddleware.CookieAdd(Microsoft.AspNetCore.Http.HttpContext@,System.String@,System.String@,System.Int32@)">
            <summary>
            Adds a cookie.
            </summary>
            <param name="context">Valid HttpContext for the request.</param>
            <param name="name">Name of the cookie.</param>
            <param name="value">Value to be stored within the cookie.</param>
            <param name="days">Number of days the cookie is valid for.  A value of -1 indicates a session cookie which will expire when the session ends.</param>
        </member>
        <member name="T:SharedPluginFeatures.BaseModel">
            <summary>
            Base model value containing data that can be displayed on every page.
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BaseModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SharedPluginFeatures.BaseModel.#ctor(System.Collections.Generic.List{SharedPluginFeatures.BreadcrumbItem}@,SharedPluginFeatures.ShoppingCartSummary@)">
            <summary>
            Constructor allowing developer to pass in a list of current BreadcrumbItem classes for
            the current request along with a ShoppingCartSummary instance.
            </summary>
            <param name="breadcrumbs">List&lt;BreadCrumbItem&gt; list of breadcrumbs for the current route.</param>
            <param name="cartSummary">ShoppingCartSummary instance with shopping cart details.</param>
        </member>
        <member name="P:SharedPluginFeatures.BaseModel.Breadcrumbs">
            <summary>
            Set the list of BreadcrumbItem.
            </summary>
            <value>List&lt;BreadCrumbItem&gt;</value>
        </member>
        <member name="P:SharedPluginFeatures.BaseModel.CartSummary">
            <summary>
            ShoppingCartSummary instance.
            </summary>
            <value>ShoppingCartSummary</value>
        </member>
        <member name="M:SharedPluginFeatures.BaseModel.RouteFriendlyName(System.String@)">
            <summary>
            Converts a string to a route friendly name, removing all but alpha numeric charactes.
            </summary>
            <param name="text">Route text to be converted.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseModel.RouteText(System.String@)">
            <summary>
            Converts a string to a route friendly name, removing all but alpha numeric charactes.
            </summary>
            <param name="text">Route text to be converted.</param>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseModel.BreadcrumbData">
            <summary>
            Retrieve a list of BreadcrumbItem object items converted to a ul/li list for display within a page.
            
            The last item in the list will not have a link generated.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:SharedPluginFeatures.BaseModel.BreadcrumbData(System.Boolean@)">
             <summary>
            Retrieve a list of BreadcrumbItem object items converted to a ul/li list for display within a page.
             </summary>
             <param name="lastItemLinked">bool.  If true the last item will have an a href link, otherwise it wont.</param>
             <returns>string</returns>
        </member>
    </members>
</doc>
